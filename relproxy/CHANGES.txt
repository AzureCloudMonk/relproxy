
 RELEASE CHANGES

* 0.8.2

    - Optimization: method JProxyInputSourceFileExcludedListener.isExcluded(File file,File) is called being parameter file also a directory, if the directory is fully
      excluded, RelProxy doesn't call isExcluded for files into the folder. Useful for big source code bases and used RelProxy for normal source code folders.
    - Reload reloadable classes using a new ClassLoader is done only when a exposed method of a singleton registered on JProxy is called.
    - Added JProxy.isEnabled()
    - API for configuration of JProxyScriptEngineFactory and JProxyScriptEngine has changed.
    - JProxyScriptEngine has now the same methods (and same behavior) as JProxy.
    - Removed JPROXYSH_SCAN_PERIOD, has no sense in shell scripting.
    - Bug fix in case of paths with spaces in JProxy.
    - Bug fix in case of ".." in paths in JProxy.
    - Manual has been very improved documenting new features and new chapters.
    - A lot of examples of using RelProxy with popular Java web frameworks.

* 0.8.1

    - Fixed a problem with class localization and loading of javax.* classes not included in Java core (ex javax.servlet classes)
    - Support of multiple input folder roots for sources: JProxyConfig.setInputPaths(String[] inputPaths) 
    - Added listener JProxyConfig.setRelProxyOnReloadListener(RelProxyOnReloadListener) to expecify excluded files
    - Added listener JProxyConfig.setJProxyCompilerListener(JProxyCompilerListener) to monitor when files are compiled
    - Added JProxyConfig.isRunning() to detect whether JProxy is configured and running
    - Added new chapters to manual:
        "Setting up a web project based on a Maven POM in NetBeans to use JProxy or GProxy"
        "How JProxy can help you only in development time (GWT example)"

* 0.8 First release

