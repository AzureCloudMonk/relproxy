
RELEASE CHANGES

* 0.8.8 

    - Support of static final fields in reloadable proxies.

* 0.8.7

    - Some improvement needed when embedding RelProxy Java using the scripting API (avoiding one unnecessary first class reload).
    - Added chapter to Manual: "Embedding RelProxy Java in your Java framework to provide hot reload".
    - Added new example in RelProxy Examples repository named relproxy_builtin_ex on how to embed RelProxy.

* 0.8.6

    - Support of class reloading in inner classes including anonymous inner classes. Chapter "JProxy or how to be able..." updated accordingly. This feature
      is used by ItsNat 1.4, this release uses RelProxy internally for user class reloading (mainly listeners).

* 0.8.5

    - Improved performance reducing blocking code when checking source code changes and no change is detected.

* 0.8.4

    - Added the method JProxyConfig.setRequiredExtraJarPaths(String[] inputJarPaths) to workaround a problem with Liferay 6.2.
    - Added JProxy.create(Object,Class<?>[]), GProxy.create(Object,Class<?>[]),JProxyScriptEngine.create(Object,Class<?>[]) for classes implementing multiple interfaces
    - The call proxy.equals(proxy2) returns true if both proxies have associated the same original object and there is no reload.
    - Added to Manual "Solving jar manifest configuration problems in JProxy" and "Identity of returned proxies"

* 0.8.3

    - First release published on bintray.com/JCenter and Maven Central. In Maven just add to your POM:

      <dependency>
        <groupId>com.innowhere</groupId>
        <artifactId>relproxy</artifactId>
        <version>0.8.3</version>
      </dependency>

* 0.8.2

    - Optimization: method JProxyInputSourceFileExcludedListener.isExcluded(File file,File) is called being parameter file also a directory, if the directory is fully
      excluded, RelProxy doesn't call isExcluded for files into the folder. Useful for big source code bases and used RelProxy for normal source code folders.
    - Reload reloadable classes using a new ClassLoader is done only when a exposed method of a singleton registered on JProxy is called.
    - Added JProxy.isEnabled()
    - API for configuration of JProxyScriptEngineFactory and JProxyScriptEngine has changed.
    - JProxyScriptEngine has now the same methods (and same behavior) as JProxy.
    - Removed JPROXYSH_SCAN_PERIOD, has no sense in shell scripting.
    - Bug fix in case of paths with spaces in JProxy.
    - Bug fix in case of ".." in paths in JProxy.
    - Manual has been very improved documenting new features and new chapters.
    - A lot of examples of using RelProxy with popular Java web frameworks.

* 0.8.1

    - Fixed a problem with class localization and loading of javax.* classes not included in Java core (ex javax.servlet classes)
    - Support of multiple input folder roots for sources: JProxyConfig.setInputPaths(String[] inputPaths)
    - Added listener JProxyConfig.setRelProxyOnReloadListener(RelProxyOnReloadListener) to expecify excluded files
    - Added listener JProxyConfig.setJProxyCompilerListener(JProxyCompilerListener) to monitor when files are compiled
    - Added JProxyConfig.isRunning() to detect whether JProxy is configured and running
    - Added new chapters to manual:
        "Setting up a web project based on a Maven POM in NetBeans to use JProxy or GProxy"
        "How JProxy can help you only in development time (GWT example)"

* 0.8 First release

